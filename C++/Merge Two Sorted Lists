Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.

Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Solution:
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
      //if list1 is empty l2 will be our answer  
      if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
      
      if(l1->val > l2->val)
        swap(l1,l2);
      
      //assign res to l1 to remember head of first sorted list
      ListNode* res = l1;
      
      while(l1!=NULL && l2!=NULL){
        ListNode* temp = NULL;
        while(l1!=NULL && l1->val <= l2->val){
          // if temp would be last node which is smaller
          temp =l1;
          l1 = l1->next;
        }
        //then point next of temp to l2
        temp->next =l2;
        //and again repeat the same swap before another iteration
        swap(l1,l2);
      }
      //res would point to head of newly formed list
      return res;
    }
};
